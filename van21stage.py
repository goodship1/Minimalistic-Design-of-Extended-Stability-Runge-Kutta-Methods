#!/usr/bin/env python3

import numpy as np
import matplotlib.pyplot as plt
import psutil, os, tracemalloc, time  # For memory and timing

###############################################################################
# 1) The Brusselator ODE
###############################################################################
def brusselator(t, Y, A=1.0, B=3.0):
    u, v = Y
    du = A - (B + 1) * u + u**2 * v
    dv = B * u - u**2 * v
    return np.array([du, dv])

###############################################################################
# 2) 21-Stage ESRK Coefficients (3rd Order)
###############################################################################
a=[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.00275846000107133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.110558229216854, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, 0.186211926193771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, -0.109068986416075, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, -0.000509452147008882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0929880453890308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, -0.0978770534881914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, -0.000140299876598299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0537793528847315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0531921098879044, 0.0554110315404936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0531921098879044, 0.0358154612236105, -0.00374823708409023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0531921098879044, 0.0358154612236105, 0.0829883024966246, -0.0534317119405256, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0531921098879044, 0.0358154612236105, 0.0829883024966246, 0.0870653960658380, 0.0304827537761600, 0, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0531921098879044, 0.0358154612236105, 0.0829883024966246, 0.0870653960658380, 0.202553924875100, 0.331695301868073, 0, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0531921098879044, 0.0358154612236105, 0.0829883024966246, 0.0870653960658380, 0.202553924875100, 0.0682434295108708, -0.257138331944943, 0, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0531921098879044, 0.0358154612236105, 0.0829883024966246, 0.0870653960658380, 0.202553924875100, 0.0682434295108708, -0.0304401699556686, -0.000876088831721412, 0, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0531921098879044, 0.0358154612236105, 0.0829883024966246, 0.0870653960658380, 0.202553924875100, 0.0682434295108708, -0.0304401699556686, -0.0996742602012178, -0.358560120377642, 0, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0531921098879044, 0.0358154612236105, 0.0829883024966246, 0.0870653960658380, 0.202553924875100, 0.0682434295108708, -0.0304401699556686, -0.0996742602012178, 0.204420245944706, 0.140633905412186, 0, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0531921098879044, 0.0358154612236105, 0.0829883024966246, 0.0870653960658380, 0.202553924875100, 0.0682434295108708, -0.0304401699556686, -0.0996742602012178, 0.204420245944706, -0.170792154838225, -2.31997439812878e-5, 0, 0], [-0.102635066620917, 0.108009356813313, -0.0861062688449798, 0.0545231863033577, 0.0211503582403360, 0.0106514711801235, 0.0732172709684681, 0.0403416939506812, 0.0531921098879044, 0.0358154612236105, 0.0829883024966246, 0.0870653960658380, 0.202553924875100, 0.0682434295108708, -0.0304401699556686, -0.0996742602012178, 0.204420245944706, -0.170792154838225, 0.205296334776427, 0.172830702973573, 0]]
b=[-0.10263506662091741, 0.10800935681331277, -0.08610626884497977, 0.05452318630335774, 0.02115035824033603, 0.010651471180123539, 0.07321727096846811, 0.04034169395068121, 0.053192109887904404, 0.035815461223610526, 0.08298830249662462, 0.08706539606583798, 0.20255392487510035, 0.06824342951087081, -0.030440169955668606, -0.09967426020121775, 0.204420245944706, -0.17079215483822502, 0.20529633477642742, 0.17558017288180622, 0.06659920534184088]

a = np.array(a)
b = np.array(b)

###############################################################################
# Helper function for memory usage
###############################################################################
def memory_usage_mb():
    process = psutil.Process(os.getpid())
    mem = process.memory_info().rss / 1024 / 1024  # Convert bytes to MB
    return mem

###############################################################################
# 3) Single Step of the ESRK-21 Method with Iteration Count
###############################################################################
def esrk21_step(f, t, y, h, a, b):
    s = len(b)
    k = [None] * s
    iteration_count = 0
    
    for i in range(s):
        iteration_count += 1  # Count each stage as an iteration
        c_i = np.sum(a[i, :i])
        y_stage = y.copy()
        for j in range(i):
            y_stage += h * a[i, j] * k[j]
        k[i] = f(t + c_i * h, y_stage)
    
    y_next = y.copy()
    for i in range(s):
        y_next += h * b[i] * k[i]
        
    return y_next, iteration_count

###############################################################################
# 4) Integrator Loop with Iteration Tracking
###############################################################################
def esrk21_solve(f, t0, y0, tmax, h, a, b):
    n_steps = int(np.ceil((tmax - t0) / h))
    h_final = (tmax - t0) / n_steps

    ts = np.zeros(n_steps + 1)
    ys = np.zeros((n_steps + 1, len(y0)))
    iteration_counts = []

    ts[0] = t0
    ys[0] = y0
    t_current = t0
    y_current = y0.copy()

    for n in range(n_steps):
        y_next, iterations = esrk21_step(f, t_current, y_current, h_final, a, b)
        iteration_counts.append(iterations)
        t_current += h_final
        y_current = y_next

        ts[n + 1] = t_current
        ys[n + 1] = y_current

    return ts, ys, iteration_counts

###############################################################################
# 5) Convergence Study with Detailed Metrics for ESRK-21
###############################################################################
def convergence_study_extended():
    t0, tmax = 0.0, 1.0
    y0 = np.array([1.0, 1.0], dtype=np.float64)

    # Reference solution with a very small step size
    h_ref = 0.0001
    print("Generating reference solution with h=0.0001...")
    _, y_ref_arr, _ = esrk21_solve(brusselator, t0, y0, tmax, h_ref, a, b)
    y_ref = y_ref_arr[-1]
    print("Reference solution generated.")

    hs = np.linspace(0.01, 0.001, 100)
    errors = []
    memory_data = []
    iteration_data = []
    computation_times = []

    for h in hs:
        print(f"Running ESRK-21 with h={h}...")
        tracemalloc.start()
        start_time = time.time()

        ts, y_sol, iterations = esrk21_solve(brusselator, t0, y0, tmax, h, a, b)

        end_time = time.time()
        computation_times.append(end_time - start_time)

        current, peak = tracemalloc.get_traced_memory()
        memory_data.append(peak)
        tracemalloc.stop()

        y_end = y_sol[-1]
        err = np.linalg.norm(y_end - y_ref, ord=np.inf)
        errors.append(err)
        iteration_data.append(np.mean(iterations))  # average iterations per step

        print(f"h={h}: Error={err}, Avg Iterations={np.mean(iterations)}, Time={computation_times[-1]:.6f}s, Memory={peak} bytes")

    orders = []
    for i in range(1, len(errors)):
        order = np.log(errors[i-1] / errors[i]) / np.log(hs[i-1] / hs[i])
        orders.append(order)

    print("\nESRK-21 Method on 1D Brusselator")
    print("Step sizes:", hs)
    print("Errors:", errors)
    print("Orders of convergence:", orders)
    print("Average iterations per step:", iteration_data)
    print("Computation times (s):", computation_times)
    print("Memory usage (bytes):", memory_data)

    plt.figure(figsize=(8, 6))
    plt.loglog(hs, errors, 'o-', label='Numerical Error')
    C = errors[0] / (hs[0] ** 3)
    plt.loglog(hs, [C * (h ** 3) for h in hs], 'k--', label='Third Order Reference')
    plt.xlabel('Time Step Size (Δt)')
    plt.ylabel('Error Norm')
    plt.title('Convergence Study of ESRK-21 on 1D Brusselator')
    plt.legend()
    plt.grid(True, which="both", ls="--")
    plt.show()

###############################################################################
# 6) Main Demo
###############################################################################
def main():
    t0, tmax = 0.0, 10.0
    y0 = np.array([1.0, 1.0])
    h_demo = 0.01
    ts, ys, _ = esrk21_solve(brusselator, t0, y0, tmax, h_demo, a, b)

    plt.figure()
    plt.plot(ts, ys[:, 0], label='u(t)')
    plt.plot(ts, ys[:, 1], label='v(t)')
    plt.title("Brusselator ODE solved by 21-stage ESRK (3rd order), h=0.01")
    plt.xlabel("Time")
    plt.ylabel("u(t), v(t)")
    plt.legend(loc="best")
    plt.grid(True)
    plt.show()

    convergence_study_extended()

if __name__ == "__main__":
    main()
