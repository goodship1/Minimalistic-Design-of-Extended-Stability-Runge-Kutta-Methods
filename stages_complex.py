import numpy as np
import matplotlib.pyplot as plt

a_15 = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0243586417803786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0258303808904268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0667956303329210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0140960387721938, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0412105997557866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0149469583607297, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.414086419082813, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.00395908281378477, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.480561088337756, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.00661245794721050, 0.319660987317690, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.00661245794721050, 0.216746869496930, 0.00668808071535874, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.00661245794721050, 0.216746869496930, 0, 0.0374638233561973, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.00661245794721050, 0.216746869496930, 0, 0.422645975498266, 0.439499983548480, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.00661245794721050, 0.216746869496930, 0, 0.422645975498266, 0.0327614907498598, 0.367805790222090, 0]
])


b_15 = np.array([
    0.035898932499408134, 0.035898932499408134, 0.035898932499408134,
    0.035898932499408134, 0.035898932499408134, 0.035898932499408134,
    0.035898932499408134, 0.035898932499408134, 0.006612457947210495,
    0.21674686949693006, 0.0, 0.42264597549826616, 0.03276149074985981,
    0.0330623263939421, 0.0009799086295048407
])

a_21 = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0477859117523170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, -0.000342225369733892, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, -0.0379306642681654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0713548421395141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259359352931570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, -0.00953495091906422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0904519523018936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, -0.000396135089732896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, -0.153935717033075, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, 0.000795951292330683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, -0.119588952205909, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.164687679052309, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, -0.151151371693320, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, -0.185777493787929, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, 0.181570806943121, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, -0.157721301562393, 9.54651547687642e-5, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, -0.157721301562393, 0.171838581104214, 0.188961619753159, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, -0.157721301562393, 0.171838581104214, -0.159282253882384, 0.163589906237245, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, -0.157721301562393, 0.171838581104214, -0.159282253882384, 0.153692305711512, -0.000244631681385317, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, -0.157721301562393, 0.171838581104214, -0.159282253882384, 0.153692305711512, 0.135802482016176, -0.146394354124576, 0]
], dtype=np.float128)


b_21 = np.array([
    0.025918693385897126,  0.025918693385897126,  0.025918693385897126,
    0.025918693385897126,  0.025918693385897126,  0.025918693385897126,
    0.025918693385897126,  0.025918693385897126,  0.010679463093674657,
   -0.11533544419119937,   0.15735456931774092,   0.09969539160404886,
    0.12462657068046491,   0.09992542978103731,  -0.1577213015623934,
    0.17183858110421352,  -0.1592822538823839,    0.15369230571151177,
    0.13580248201617606,   0.12674481627127573,   0.14462984296865586
], dtype=np.float128)



import numpy as np

a_16 = [
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05605715857334101, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05290454917816209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.06833019911420511, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.007879729461231815, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.10465469206441057, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.01066546103886995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.15897186468087526, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.40590755609144746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.28195336240245045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 1.082342007629953e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, 0.21275272127631875, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, -0.022707660602945066, 0.28310569797044477, 0.0, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, -0.022707660602945066, 0.08375616639653707, 0.38956974385079585, 0.0, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, -0.022707660602945066, 0.08375616639653707, 0.21655414821724264, 0.38781060912139453, 0.0, 0.0],
    [0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, -0.022707660602945066, 0.08375616639653707, 0.21655414821724264, 0.34706141509847754, -0.0019522316240544887, 0.0]
]

a_16 = np.array(a_16)



b_16=[0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, -0.022707660602945066, 0.08375616639653707, 0.21655414821724264, 0.34706141509847754, 0.33047192159344096, -0.2993698698898659]

print("a_16 shape:", a_16.shape)
print("b_16 length:", len(b_16))


# Assume you have three arrays of a-matrices and corresponding s values:
# a_list = [a_15, a_21, a_16]
# names = ["3rd order, 15-stage", "3rd order, 21-stage", "4th order, 16-stage"]
# R_max_list = [R_max_15, R_max_21, R_max_16]

a_list = [a_15, a_21, a_16]   # Fill in your actual arrays!
names = ["3rd order, 15-stage", "3rd order, 21-stage", "4th order, 16-stage"]
R_max_list = [72.36, 141.44, 58.65]  # Example R_max values for each scheme
b_list = [b_15, b_21, b_16]


a_list = [np.array(a_15, dtype=np.float64), 
          np.array(a_21, dtype=np.float64), 
          np.array(a_16, dtype=np.float64)]
b_list = [np.array(b_15, dtype=np.float64), 
          np.array(b_21, dtype=np.float64), 
          np.array(b_16, dtype=np.float64)]


def compute_R(a, b, z):
    s = len(b)
    I = np.eye(s)
    # If z is scalar, promote to 1x1 array for inv
    A = a.copy()
    try:
        mat = (I - z*A)
        v = np.linalg.solve(mat, np.ones(s))
        return 1 + z * np.dot(b, v)
    except np.linalg.LinAlgError:
        return np.nan

def compute_M(a, z):
    s = a.shape[0]
    Q = np.zeros(s, dtype=complex)
    for k in range(1, s):
        Q[k] = np.sum(a[k, :k] * (1 + z * Q[:k]))
    return np.max(np.abs(Q))

# --- Plotting parameters ---
res = 200  # grid resolution (use 200x200 for speed, increase for more detail)
fig, axes = plt.subplots(1, 3, figsize=(18, 6))
for idx, (a, b, title, R_max) in enumerate(zip(a_list, b_list, names, R_max_list)):
    # Define grid in complex plane (scaled by R_max for each scheme)
    x = np.linspace(-R_max, R_max/10, res)  # real part
    y = np.linspace(-R_max/2, R_max/2, res)  # imag part
    X, Y = np.meshgrid(x, y)
    Z = X + 1j*Y

    # Compute M(z) and |R(z)| for the whole grid
    M = np.zeros_like(X)
    R_mod = np.zeros_like(X)
    for i in range(res):
        for j in range(res):
            z = Z[i, j]
            M[i, j] = compute_M(a, z)
            R_mod[i, j] = np.abs(compute_R(a, b, z))

    # Plot log10(M(z))
    im = axes[idx].imshow(np.log10(M), origin='lower',
                          extent=(x[0], x[-1], y[0], y[-1]),
                          aspect='auto', cmap='viridis')
    axes[idx].set_title(title)
    axes[idx].set_xlabel(r'$\operatorname{Re}(z)$')
    if idx == 0:
        axes[idx].set_ylabel(r'$\operatorname{Im}(z)$')

    # Overlay |R(z)|=1 stability boundary
    cs = axes[idx].contour(X, Y, R_mod, levels=[1.0], colors='w', linewidths=1.3)
    axes[idx].clabel(cs, inline=True, fmt={1.0: r'$|R(z)|=1$'}, fontsize=10)

    # Colorbar
    cbar = plt.colorbar(im, ax=axes[idx], pad=0.03, aspect=30)
    cbar.set_label(r'$\log_{10} M(z)$', rotation=270, labelpad=16)

plt.tight_layout(rect=[0, 0, 1, 0.97])
plt.suptitle('Complex-Plane Maximum Internal Amplification $M(z)$ for All ESRK Schemes', fontsize=16, y=1.02)
plt.show()
