a_flat=[0.05605715857334101, 0.05286571540963862, 0.05290454917816209, 0.05286571540963862, 0.05286571540963862, 0.06833019911420511, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.007879729461231815, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.10465469206441057, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.01066546103886995, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.15897186468087526, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.40590755609144746, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.28195336240245045, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 1.082342007629953e-05, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, 0.21275272127631875, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, -0.022707660602945066, 0.28310569797044477, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, -0.022707660602945066, 0.08375616639653707, 0.38956974385079585, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, -0.022707660602945066, 0.08375616639653707, 0.21655414821724264, 0.38781060912139453, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, -0.022707660602945066, 0.08375616639653707, 0.21655414821724264, 0.34706141509847754, -0.0019522316240544887]
b=[0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, 0.05286571540963862, -0.3212623636406718, 0.2425705195506756, -0.022707660602945066, 0.08375616639653707, 0.21655414821724264, 0.34706141509847754, 0.33047192159344096, -0.2993698698898659]




import numpy as np

# Number of stages
S = 16


# ─── 2) Reconstruct A as a 16×16 strictly-lower-triangular matrix ───
A = np.zeros((S, S))
idx = 0
for i in range(1, S):
    for j in range(i):
        A[i, j] = a_flat[idx]
        idx += 1

# ─── 3) Compute the nodes c[i] = ∑_{j=0..i-1} A[i,j] ───
c = np.array([np.sum(A[i, :i]) for i in range(S)])

# ─── 4) Third-Order B-Series Sums ───
B1    = np.sum(b)                     # ∑ b_i
B2    = np.sum(b * c)                 # ∑ b_i c_i
B3a   = np.sum(b * c**2)              # ∑ b_i c_i^2
B3b   = np.sum([b[i] * np.dot(A[i, :i], c[:i]) for i in range(S)])  # ∑ b_i ∑_{j<i} a_ij c_j

# ─── 5) Fourth-Order B-Series Sums ───
# (a) ∑ b_i c_i^3
B4_1 = np.sum(b * c**3)

# (b) ∑ b_i (∑_{j<i} a_{ij} c_j) * c_i
B4_2 = np.sum([b[i] * np.dot(A[i, :i], c[:i]) * c[i] for i in range(S)])

# (c) ∑ b_i ∑_{j<i} a_{ij} c_j^2
B4_3 = np.sum([b[i] * np.dot(A[i, :i], c[:i]**2) for i in range(S)])

# (d) ∑ b_i ∑_{j<i} ∑_{k<j} a_{ij} a_{jk} c_k
B4_4 = 0.0
for i in range(S):
    for j in range(i):
        for k in range(j):
            B4_4 += b[i] * A[i, j] * A[j, k] * c[k]

# ─── 6) Print all sums and their residuals ───
print("=== First- and Second-Order ===")
print(f"∑ b_i          = {B1:.12f}   (target=1.0)   residual={abs(B1 - 1.0):.2e}")
print(f"∑ b_i c_i      = {B2:.12f}   (target=0.5)   residual={abs(B2 - 0.5):.2e}")

print("\n=== Third-Order ===")
print(f"∑ b_i c_i^2    = {B3a:.12f}   (target=0.3333) residual={abs(B3a - 1/3):.2e}")
print(f"∑ b_i ∑ a_ij c_j = {B3b:.12f}   (target=0.1667) residual={abs(B3b - 1/6):.2e}")

print("\n=== Fourth-Order ===")
print(f"∑ b_i c_i^3                  = {B4_1:.12f}   (target=0.25)   residual={abs(B4_1 - 0.25):.2e}")
print(f"∑ b_i (∑ a_ij c_j) c_i       = {B4_2:.12f}   (target=0.125)  residual={abs(B4_2 - 0.125):.2e}")
print(f"∑ b_i ∑ a_ij c_j^2           = {B4_3:.12f}   (target=0.0833) residual={abs(B4_3 - 1/12):.2e}")
print(f"∑ b_i ∑ ∑ a_ij a_jk c_k      = {B4_4:.12f}   (target=0.0417) residual={abs(B4_4 - 1/24):.2e}")
