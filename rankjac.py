import numpy as np
from numpy.linalg import matrix_rank
a = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0477859117523170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, -0.000342225369733892, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, -0.0379306642681654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0713548421395141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259359352931570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, -0.00953495091906422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0904519523018936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, -0.000396135089732896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, -0.153935717033075, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, 0.000795951292330683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, -0.119588952205909, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.164687679052309, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, -0.151151371693320, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, -0.185777493787929, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, 0.181570806943121, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, -0.157721301562393, 9.54651547687642e-5, 0, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, -0.157721301562393, 0.171838581104214, 0.188961619753159, 0, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, -0.157721301562393, 0.171838581104214, -0.159282253882384, 0.163589906237245, 0, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, -0.157721301562393, 0.171838581104214, -0.159282253882384, 0.153692305711512, -0.000244631681385317, 0, 0],
    [0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0259186933858971, 0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, 0.0999254297810373, -0.157721301562393, 0.171838581104214, -0.159282253882384, 0.153692305711512, 0.135802482016176, -0.146394354124576, 0]
], dtype=float)

b_o = np.array([
    0.025918693385897126,  0.025918693385897126,  0.025918693385897126,
    0.025918693385897126,  0.025918693385897126,  0.025918693385897126,
    0.025918693385897126,  0.025918693385897126,  0.010679463093674657,
   -0.11533544419119937,   0.15735456931774092,   0.09969539160404886,
    0.12462657068046491,   0.09992542978103731,  -0.1577213015623934,
    0.17183858110421352,  -0.1592822538823839,    0.15369230571151177,
    0.13580248201617606,   0.12674481627127573,   0.14462984296865586
], dtype=float)

# Explicitly provided Butcher Tableau (21-stage example)
A = np.array(a)  # insert your 21-stage ESRK A matrix here
b = np.array(b_o)  # insert your 21-stage ESRK b vector here
S = len(b)

# Compute c from A explicitly
c = np.sum(A, axis=1)

# Define the order conditions explicitly
def order_conditions(A, b, c):
    conditions = np.zeros(4)
    conditions[0] = np.sum(b) - 1
    conditions[1] = np.dot(b, c) - 0.5
    conditions[2] = np.dot(b, c**2) - 1/3

    # Double summation for 3rd-order condition explicitly
    conditions[3] = 0
    for i in range(S):
        sum_inner = np.dot(A[i,:], c)
        conditions[3] += b[i] * sum_inner
    conditions[3] -= 1/6
    return conditions

# Flatten the unique parameters from your minimal ESRK tableau explicitly
def flatten_params(A, b):
    # Collect unique parameters explicitly from provided structure
    params = np.concatenate((A[np.tril_indices(S, -1)], b))
    return params

# Unflatten the parameters explicitly
def unflatten_params(params, S):
    A = np.zeros((S,S))
    tril_indices = np.tril_indices(S, -1)
    tril_size = len(tril_indices[0])
    A[tril_indices] = params[:tril_size]
    b = params[tril_size:]
    return A, b

# Compute Jacobian numerically with finite differences explicitly
def compute_jacobian(params, S, epsilon=1e-8):
    n_params = len(params)
    n_conditions = 4
    J = np.zeros((n_conditions, n_params))
    f0 = order_conditions(*unflatten_params(params, S), c)

    for i in range(n_params):
        perturb = np.zeros_like(params)
        perturb[i] = epsilon
        perturbed_params = params + perturb
        A_p, b_p = unflatten_params(perturbed_params, S)
        c_p = np.sum(A_p, axis=1)
        f_perturbed = order_conditions(A_p, b_p, c_p)
        J[:,i] = (f_perturbed - f0) / epsilon

    return J

# Perform rank check explicitly
params_minimal = flatten_params(A, b)
J_minimal = compute_jacobian(params_minimal, S)
rank_minimal = matrix_rank(J_minimal)

print("Jacobian Matrix:\n", J_minimal)
print("Jacobian Rank (minimal 2S-7 scheme):", rank_minimal)

# Verify explicitly that further reduction decreases rank
# Remove one parameter explicitly to simulate 2S-8 scenario
params_reduced = params_minimal[:-1]  # remove one parameter explicitly
try:
    J_reduced = compute_jacobian(params_reduced, S)
    rank_reduced = matrix_rank(J_reduced)
    print("Jacobian Rank (2S-8 scheme):", rank_reduced)
except Exception as e:
    print("Reducing parameters caused failure as expected:", e)
