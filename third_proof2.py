import sympy as sp

# Step 1: Define symbolic variables p0 to p27
max_index = 27
p = sp.symbols([f'p{i}' for i in range(max_index + 1)])

# Helper dictionary for sympify locals
locals_dict = {f'p{i}': p[i] for i in range(max_index + 1)}

# Step 2: Store your polynomials as strings
polynomial_conditions = {
    "S16_Cond1": "8*p0 + p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8 - 1",
    "S16_Cond2": "p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p0*(3*p0 + p12) + p0*(4*p0 + p13) + p0*(5*p0 + p14) + p0*(6*p0 + p15) + p1*(7*p0 + p16) + p2*(8*p0 + p17) + p3*(8*p0 + p1 + p18) + p4*(8*p0 + p1 + p19 + p2) + p5*(8*p0 + p1 + p2 + p20 + p3) + p6*(8*p0 + p1 + p2 + p21 + p3 + p4) + p7*(8*p0 + p1 + p2 + p22 + p3 + p4 + p5) + p8*(8*p0 + p1 + p2 + p23 + p3 + p4 + p5 + p6) - 1/2",
    "S16_Cond3": "p0*p9**2 + p0*(p0 + p10)**2 + p0*(2*p0 + p11)**2 + p0*(3*p0 + p12)**2 + p0*(4*p0 + p13)**2 + p0*(5*p0 + p14)**2 + p0*(6*p0 + p15)**2 + p1*(7*p0 + p16)**2 + p2*(8*p0 + p17)**2 + p3*(8*p0 + p1 + p18)**2 + p4*(8*p0 + p1 + p19 + p2)**2 + p5*(8*p0 + p1 + p2 + p20 + p3)**2 + p6*(8*p0 + p1 + p2 + p21 + p3 + p4)**2 + p7*(8*p0 + p1 + p2 + p22 + p3 + p4 + p5)**2 + p8*(8*p0 + p1 + p2 + p23 + p3 + p4 + p5 + p6)**2 - 1/3",
    "S16_Cond4": "p0*p10*p9 + p0*(p0*p9 + p11*(p0 + p10)) + p0*(p0*p9 + p0*(p0 + p10) + p12*(2*p0 + p11)) + p0*(p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p13*(3*p0 + p12)) + p0*(p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p0*(3*p0 + p12) + p14*(4*p0 + p13)) + p0*(p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p0*(3*p0 + p12) + p0*(4*p0 + p13) + p15*(5*p0 + p14)) + p1*(p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p0*(3*p0 + p12) + p0*(4*p0 + p13) + p0*(5*p0 + p14) + p16*(6*p0 + p15)) + p2*(p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p0*(3*p0 + p12) + p0*(4*p0 + p13) + p0*(5*p0 + p14) + p0*(6*p0 + p15) + p17*(7*p0 + p16)) + p3*(p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p0*(3*p0 + p12) + p0*(4*p0 + p13) + p0*(5*p0 + p14) + p0*(6*p0 + p15) + p1*(7*p0 + p16) + p18*(8*p0 + p17)) + p4*(p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p0*(3*p0 + p12) + p0*(4*p0 + p13) + p0*(5*p0 + p14) + p0*(6*p0 + p15) + p1*(7*p0 + p16) + p19*(8*p0 + p1 + p18) + p2*(8*p0 + p17)) + p5*(p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p0*(3*p0 + p12) + p0*(4*p0 + p13) + p0*(5*p0 + p14) + p0*(6*p0 + p15) + p1*(7*p0 + p16) + p2*(8*p0 + p17) + p20*(8*p0 + p1 + p19 + p2) + p3*(8*p0 + p1 + p18)) + p6*(p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p0*(3*p0 + p12) + p0*(4*p0 + p13) + p0*(5*p0 + p14) + p0*(6*p0 + p15) + p1*(7*p0 + p16) + p2*(8*p0 + p17) + p21*(8*p0 + p1 + p2 + p20 + p3) + p3*(8*p0 + p1 + p18) + p4*(8*p0 + p1 + p19 + p2)) + p7*(p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p0*(3*p0 + p12) + p0*(4*p0 + p13) + p0*(5*p0 + p14) + p0*(6*p0 + p15) + p1*(7*p0 + p16) + p2*(8*p0 + p17) + p22*(8*p0 + p1 + p2 + p21 + p3 + p4) + p3*(8*p0 + p1 + p18) + p4*(8*p0 + p1 + p19 + p2) + p5*(8*p0 + p1 + p2 + p20 + p3)) + p8*(p0*p9 + p0*(p0 + p10) + p0*(2*p0 + p11) + p0*(3*p0 + p12) + p0*(4*p0 + p13) + p0*(5*p0 + p14) + p0*(6*p0 + p15) + p1*(7*p0 + p16) + p2*(8*p0 + p17) + p23*(8*p0 + p1 + p2 + p22 + p3 + p4 + p5) + p3*(8*p0 + p1 + p18) + p4*(8*p0 + p1 + p19 + p2) + p5*(8*p0 + p1 + p2 + p20 + p3) + p6*(8*p0 + p1 + p2 + p21 + p3 + p4)) - 1/6",

    "S17_Cond1": "8*p0 + p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9 - 1",
    "S17_Cond2": "p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p0*(4*p0 + p14) + p0*(5*p0 + p15) + p0*(6*p0 + p16) + p1*(7*p0 + p17) + p2*(8*p0 + p18) + p3*(8*p0 + p1 + p19) + p4*(8*p0 + p1 + p2 + p20) + p5*(8*p0 + p1 + p2 + p21 + p3) + p6*(8*p0 + p1 + p2 + p22 + p3 + p4) + p7*(8*p0 + p1 + p2 + p23 + p3 + p4 + p5) + p8*(8*p0 + p1 + p2 + p24 + p3 + p4 + p5 + p6) + p9*(8*p0 + p1 + p2 + p25 + p3 + p4 + p5 + p6 + p7) - 1/2",
    "S17_Cond3": "p0*p10**2 + p0*(p0 + p11)**2 + p0*(2*p0 + p12)**2 + p0*(3*p0 + p13)**2 + p0*(4*p0 + p14)**2 + p0*(p0 + p15)**2 + p0*(6*p0 + p16)**2 + p1*(7*p0 + p17)**2 + p2*(8*p0 + p18)**2 + p3*(8*p0 + p1 + p19)**2 + p4*(8*p0 + p1 + p2 + p20)**2 + p5*(8*p0 + p1 + p2 + p21 + p3)**2 + p6*(8*p0 + p1 + p2 + p22 + p3 + p4)**2 + p7*(8*p0 + p1 + p2 + p23 + p3 + p4 + p5)**2 + p8*(8*p0 + p1 + p2 + p24 + p3 + p4 + p5 + p6)**2 + p9*(8*p0 + p1 + p2 + p25 + p3 + p4 + p5 + p6 + p7)**2 - 1/3",
    "S17_Cond4": "p0*p10*p11 + p0*(p0*p10 + p12*(p0 + p11)) + p0*(p0*p10 + p0*(p0 + p11) + p13*(2*p0 + p12)) + p0*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p14*(3*p0 + p13)) + p0*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p15*(4*p0 + p14)) + p0*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p0*(4*p0 + p14) + p16*(5*p0 + p15)) + p1*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p0*(4*p0 + p14) + p0*(5*p0 + p15) + p17*(6*p0 + p16)) + p2*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p0*(4*p0 + p14) + p0*(5*p0 + p15) + p0*(6*p0 + p16) + p18*(7*p0 + p17)) + p3*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p0*(4*p0 + p14) + p0*(5*p0 + p15) + p0*(6*p0 + p16) + p1*(7*p0 + p17) + p19*(8*p0 + p18)) + p4*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p0*(4*p0 + p14) + p0*(5*p0 + p15) + p0*(6*p0 + p16) + p1*(7*p0 + p17) + p2*(8*p0 + p18) + p20*(8*p0 + p1 + p19)) + p5*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p0*(4*p0 + p14) + p0*(5*p0 + p15) + p0*(6*p0 + p16) + p1*(7*p0 + p17) + p2*(8*p0 + p18) + p21*(8*p0 + p1 + p2 + p20) + p3*(8*p0 + p1 + p19)) + p6*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p0*(4*p0 + p14) + p0*(5*p0 + p15) + p0*(6*p0 + p16) + p1*(7*p0 + p17) + p2*(8*p0 + p18) + p22*(8*p0 + p1 + p2 + p21 + p3) + p3*(8*p0 + p1 + p19) + p4*(8*p0 + p1 + p2 + p20)) + p7*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p0*(4*p0 + p14) + p0*(5*p0 + p15) + p0*(6*p0 + p16) + p1*(7*p0 + p17) + p2*(8*p0 + p18) + p23*(8*p0 + p1 + p2 + p22 + p3 + p4) + p3*(8*p0 + p1 + p19) + p4*(8*p0 + p1 + p2 + p20) + p5*(8*p0 + p1 + p2 + p21 + p3)) + p8*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p0*(4*p0 + p14) + p0*(5*p0 + p15) + p0*(6*p0 + p16) + p1*(7*p0 + p17) + p2*(8*p0 + p18) + p24*(8*p0 + p1 + p2 + p23 + p3 + p4 + p5) + p3*(8*p0 + p1 + p19) + p4*(8*p0 + p1 + p2 + p20) + p5*(8*p0 + p1 + p2 + p21 + p3) + p6*(8*p0 + p1 + p2 + p22 + p3 + p4)) + p9*(p0*p10 + p0*(p0 + p11) + p0*(2*p0 + p12) + p0*(3*p0 + p13) + p0*(4*p0 + p14) + p0*(5*p0 + p15) + p0*(6*p0 + p16) + p1*(7*p0 + p17) + p2*(8*p0 + p18) + p25*(8*p0 + p1 + p2 + p24 + p3 + p4 + p5 + p6) + p3*(8*p0 + p1 + p19) + p4*(8*p0 + p1 + p2 + p20) + p5*(8*p0 + p1 + p2 + p21 + p3) + p6*(8*p0 + p1 + p2 + p22 + p3 + p4) + p7*(8*p0 + p1 + p2 + p23 + p3 + p4 + p5)) - 1/6",

    "S18_Cond1": "8*p0 + p1 + p10 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9 - 1",
    "S18_Cond2": "p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p10*(8*p0 + p1 + p2 + p27 + p3 + p4 + p5 + p6 + p7 + p8) + p2*(8*p0 + p19) + p3*(8*p0 + p1 + p20) + p4*(8*p0 + p1 + p2 + p21) + p5*(8*p0 + p1 + p2 + p22 + p3) + p6*(8*p0 + p1 + p2 + p23 + p3 + p4) + p7*(8*p0 + p1 + p2 + p24 + p3 + p4 + p5) + p8*(8*p0 + p1 + p2 + p25 + p3 + p4 + p5 + p6) + p9*(8*p0 + p1 + p2 + p26 + p3 + p4 + p5 + p6 + p7) - 1/2",
    "S18_Cond3": "p0*p11**2 + p0*(p0 + p12)**2 + p0*(2*p0 + p13)**2 + p0*(3*p0 + p14)**2 + p0*(4*p0 + p15)**2 + p0*(5*p0 + p16)**2 + p0*(6*p0 + p17)**2 + p1*(7*p0 + p18)**2 + p10*(8*p0 + p1 + p2 + p27 + p3 + p4 + p5 + p6 + p7 + p8)**2 + p2*(8*p0 + p19)**2 + p3*(8*p0 + p1 + p20)**2 + p4*(8*p0 + p1 + p2 + p21)**2 + p5*(8*p0 + p1 + p2 + p22 + p3)**2 + p6*(8*p0 + p1 + p2 + p23 + p3 + p4)**2 + p7*(8*p0 + p1 + p2 + p24 + p3 + p4 + p5)**2 + p8*(8*p0 + p1 + p2 + p25 + p3 + p4 + p5 + p6)**2 + p9*(8*p0 + p1 + p2 + p26 + p3 + p4 + p5 + p6 + p7)**2 - 1/3",
    "S18_Cond4": "p0*p11*p12 + p0*(p0*p11 + p13*(p0 + p12)) + p0*(p0*p11 + p0*(p0 + p12) + p14*(2*p0 + p13)) + p0*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p15*(3*p0 + p14)) + p0*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p16*(4*p0 + p15)) + p0*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p17*(5*p0 + p16)) + p1*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p18*(6*p0 + p17)) + p10*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p2*(8*p0 + p19) + p27*(8*p0 + p1 + p2 + p26 + p3 + p4 + p5 + p6 + p7) + p3*(8*p0 + p1 + p20) + p4*(8*p0 + p1 + p2 + p21) + p5*(8*p0 + p1 + p2 + p22 + p3) + p6*(8*p0 + p1 + p2 + p23 + p3 + p4) + p7*(8*p0 + p1 + p2 + p24 + p3 + p4 + p5) + p8*(8*p0 + p1 + p2 + p25 + p3 + p4 + p5 + p6)) + p2*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p19*(7*p0 + p18)) + p3*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p20*(8*p0 + p19)) + p4*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p2*(8*p0 + p19) + p21*(8*p0 + p1 + p20)) + p5*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p2*(8*p0 + p19) + p22*(8*p0 + p1 + p2 + p21) + p3*(8*p0 + p1 + p20)) + p6*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p2*(8*p0 + p19) + p23*(8*p0 + p1 + p2 + p22 + p3) + p3*(8*p0 + p1 + p20) + p4*(8*p0 + p1 + p2 + p21)) + p7*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p2*(8*p0 + p19) + p24*(8*p0 + p1 + p2 + p23 + p3 + p4) + p3*(8*p0 + p1 + p20) + p4*(8*p0 + p1 + p2 + p21) + p5*(8*p0 + p1 + p2 + p22 + p3)) + p8*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p2*(8*p0 + p19) + p25*(8*p0 + p1 + p2 + p24 + p3 + p4 + p5) + p3*(8*p0 + p1 + p20) + p4*(8*p0 + p1 + p2 + p21) + p5*(8*p0 + p1 + p2 + p22 + p3) + p6*(8*p0 + p1 + p2 + p23 + p3 + p4)) + p9*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p2*(8*p0 + p19) + p26*(8*p0 + p1 + p2 + p25 + p3 + p4 + p5 + p6) + p3*(8*p0 + p1 + p20) + p4*(8*p0 + p1 + p2 + p21) + p5*(8*p0 + p1 + p2 + p22 + p3) + p6*(8*p0 + p1 + p2 + p23 + p3 + p4) + p7*(8*p0 + p1 + p2 + p24 + p3 + p4 + p5)) - 1/6",

    "S19_Cond1": "8*p0 + p1 + p10 + p11 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9 - 1",
    "S19_Cond2": "p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p0*(3*p0 + p15) + p0*(4*p0 + p16) + p0*(5*p0 + p17) + p0*(6*p0 + p18) + p1*(7*p0 + p19) + p10*(8*p0 + p1 + p2 + p28 + p3 + p4 + p5 + p6 + p7 + p8) + p11*(8*p0 + p1 + p2 + p29 + p3 + p4 + p5 + p6 + p7 + p8 + p9) + p2*(8*p0 + p20) + p3*(8*p0 + p1 + p21) + p4*(8*p0 + p1 + p2 + p22) + p5*(8*p0 + p1 + p2 + p23 + p3) + p6*(8*p0 + p1 + p2 + p24 + p3 + p4) + p7*(8*p0 + p1 + p2 + p25 + p3 + p4 + p5) + p8*(8*p0 + p1 + p2 + p26 + p3 + p4 + p5 + p6) + p9*(8*p0 + p1 + p2 + p27 + p3 + p4 + p5 + p6 + p7) - 1/2",
    "S19_Cond3": "p0*p12**2 + p0*(p0 + p13)**2 + p0*(2*p0 + p14)**2 + p0*(3*p0 + p15)**2 + p0*(4*p0 + p16)**2 + p0*(5*p0 + p17)**2 + p0*(6*p0 + p18)**2 + p1*(7*p0 + p19)**2 + p10*(8*p0 + p1 + p2 + p28 + p3 + p4 + p5 + p6 + p7 + p8)**2 + p11*(8*p0 + p1 + p2 + p29 + p3 + p4 + p5 + p6 + p7 + p8 + p9)**2 + p2*(8*p0 + p20)**2 + p3*(8*p0 + p1 + p21)**2 + p4*(8*p0 + p1 + p2 + p22)**2 + p5*(8*p0 + p1 + p2 + p23 + p3)**2 + p6*(8*p0 + p1 + p2 + p24 + p3 + p4)**2 + p7*(8*p0 + p1 + p2 + p25 + p3 + p4 + p5)**2 + p8*(8*p0 + p1 + p2 + p26 + p3 + p4 + p5 + p6)**2 + p9*(8*p0 + p1 + p2 + p27 + p3 + p4 + p5 + p6 + p7)**2 - 1/3",
    "S19_Cond4": "p0*p12*p13 + p0*(p0*p12 + p14*(p0 + p13)) + p0*(p0*p12 + p0*(p0 + p13) + p15*(2*p0 + p14)) + p0*(p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p16*(3*p0 + p15)) + p0*(p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p0*(3*p0 + p15) + p17*(4*p0 + p16)) + p0*(p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p0*(3*p0 + p15) + p0*(4*p0 + p16) + p18*(5*p0 + p17)) + p1*(p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p0*(3*p0 + p15) + p0*(4*p0 + p16) + p0*(5*p0 + p17) + p19*(6*p0 + p18)) + p10*(p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p0*(3*p0 + p15) + p0*(4*p0 + p16) + p0*(5*p0 + p17) + p0*(6*p0 + p18) + p1*(7*p0 + p19) + p2*(8*p0 + p20) + p28*(8*p0 + p1 + p2 + p27 + p3 + p4 + p5 + p6 + p7) + p3*(8*p0 + p1 + p21) + p4*(8*p0 + p1 + p2 + p22) + p5*(8*p0 + p1 + p2 + p23 + p3) + p6*(8*p0 + p1 + p2 + p24 + p3 + p4) + p7*(8*p0 + p1 + p2 + p25 + p3 + p4 + p5) + p8*(8*p0 + p1 + p2 + p26 + p3 + p4 + p5 + p6)) + p11*(p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p0*(3*p0 + p15) + p0*(4*p0 + p16) + p0*(5*p0 + p17) + p0*(6*p0 + p18) + p1*(7*p0 + p19) + p2*(8*p0 + p20) + p29*(8*p0 + p1 + p2 + p28 + p3 + p4 + p5 + p6 + p7 + p8) + p3*(8*p0 + p1 + p21) + p4*(8*p0 + p1 + p2 + p22) + p5*(8*p0 + p1 + p2 + p23 + p3) + p6*(8*p0 + p1 + p2 + p24 + p3 + p4) + p7*(8*p0 + p1 + p2 + p25 + p3 + p4 + p5) + p8*(8*p0 + p1 + p2 + p26 + p3 + p4 + p5 + p6) + p9*(8*p0 + p1 + p2 + p27 + p3 + p4 + p5 + p6 + p7)) + p2*(p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p0*(3*p0 + p15) + p0*(4*p0 + p16) + p0*(5*p0 + p17) + p0*(6*p0 + p18) + p20*(7*p0 + p19)) + p3*(p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p0*(3*p0 + p15) + p0*(4*p0 + p16) + p0*(5*p0 + p17) + p0*(6*p0 + p18) + p1*(7*p0 + p19) + p21*(8*p0 + p20)) + p4*(p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p0*(3*p0 + p15) + p0*(4*p0 + p16) + p0*(5*p0 + p17) + p0*(6*p0 + p18) + p1*(7*p0 + p19) + p2*(8*p0 + p20) + p22*(8*p0 + p1 + p21)) + p5*(p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p0*(3*p0 + p15) + p0*(4*p0 + p16) + p0*(5*p0 + p17) + p0*(6*p0 + p18) + p1*(7*p0 + p19) + p2*(8*p0 + p20) + p23*(8*p0 + p1 + p2 + p22) + p3*(8*p0 + p1 + p20)) + p6*(p0*p12 + p0*(p0 + p13) + p0*(2*p0 + p14) + p0*(3*p0 + p15) + p0*(4*p0 + p16) + p0*(5*p0 + p17) + p0*(6*p0 + p18) + p1*(7*p0 + p19) + p2*(8*p0 + p20) + p24*(8*p0 + p1 + p2 + p23 + p3) + p3*(8*p0 + p1 + p20) + p4*(8*p0 + p1 + p2 + p21)) + p7*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p2*(8*p0 + p19) + p25*(8*p0 + p1 + p2 + p24 + p3 + p4) + p3*(8*p0 + p1 + p20) + p4*(8*p0 + p1 + p2 + p21) + p5*(8*p0 + p1 + p2 + p22 + p3)) + p8*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p2*(8*p0 + p19) + p26*(8*p0 + p1 + p2 + p25 + p3 + p4 + p5) + p3*(8*p0 + p1 + p20) + p4*(8*p0 + p1 + p2 + p21) + p5*(8*p0 + p1 + p2 + p22 + p3) + p6*(8*p0 + p1 + p2 + p23 + p3 + p4)) + p9*(p0*p11 + p0*(p0 + p12) + p0*(2*p0 + p13) + p0*(3*p0 + p14) + p0*(4*p0 + p15) + p0*(5*p0 + p16) + p0*(6*p0 + p17) + p1*(7*p0 + p18) + p2*(8*p0 + p19) + p27*(8*p0 + p1 + p2 + p26 + p3 + p4 + p5 + p6) + p3*(8*p0 + p1 + p20) + p4*(8*p0 + p1 + p2 + p21) + p5*(8*p0 + p1 + p2 + p22 + p3) + p6*(8*p0 + p1 + p2 + p23 + p3 + p4) + p7*(8*p0 + p1 + p2 + p24 + p3 + p4 + p5)) - 1/6"
}

# Step 3: Parse to SymPy expressions
equations = {}
for name, expr_str in polynomial_conditions.items():
    try:
        expr = sp.sympify(expr_str, locals=locals_dict)
        equations[name] = expr
    except Exception as e:
        print(f"Error parsing {name}: {e}")

# Step 4: Optionally print all equations
print("Parsed order condition polynomials:")
for name, eq in equations.items():
    print(f"{name}: {eq}\n")

# Step 5: Example usage - simplify and check zero (residual form)
for name, eq in equations.items():
    simplified = sp.simplify(eq)
    print(f"{name} simplified to: {simplified}")

# Step 6: (Optional) Solve a subset or check solutions, e.g.
# sp.solve([equations["S16_Cond1"], equations["S16_Cond2"]], (p[0], p[1]))

