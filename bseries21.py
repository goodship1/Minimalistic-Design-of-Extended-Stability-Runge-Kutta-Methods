import numpy as np

# Number of stages
S = 21

# 2S-7 “collapse” pattern has already been applied to produce these numeric arrays.
# a_np[i][j] = 0 for j ≥ i; a_np[i][i−1] is the free “alpha” for row i;
# all other strictly-lower entries a_np[i][j<i−1] have been set equal to b_np[j].
a_np = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0477859117523170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971, -0.000342225369733892, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,  -0.0379306642681654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0713548421395141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259359352931570,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,  -0.00953495091906422,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0904519523018936,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,  -0.000396135089732896,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,  -0.153935717033075, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0106794630936747,  0.000795951292330683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0106794630936747,  -0.115335444191199,  -0.119588952205909, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0106794630936747,  -0.115335444191199,   0.157354569317741,   0.164687679052309, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0106794630936747,  -0.115335444191199,   0.157354569317741,   0.0996953916040489,  -0.151151371693320, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0106794630936747,  -0.115335444191199,   0.157354569317741,   0.0996953916040489,   0.124626570680465,  -0.185777493787929, 0, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0106794630936747,  -0.115335444191199,   0.157354569317741,   0.0996953916040489,   0.124626570680465,   0.0999254297810373,   0.181570806943121, 0, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0106794630936747,  -0.115335444191199,   0.157354569317741,   0.0996953916040489,   0.124626570680465,   0.0999254297810373,  -0.157721301562393,  9.54651547687642e-05, 0, 0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0106794630936747,  -0.115335444191199,   0.157354569317741,   0.0996953916040489,   0.124626570680465,   0.0999254297810373,  -0.157721301562393,   0.171838581104214,  0.188961619753159,  0, 0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0106794630936747,  -0.115335444191199,   0.157354569317741,   0.0996953916040489,   0.124626570680465,   0.0999254297810373,  -0.157721301562393,   0.171838581104214,  -0.159282253882384,  0.163589906237245,  0, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0106794630936747,  -0.115335444191199,   0.157354569317741,   0.0996953916040489,   0.124626570680465,   0.0999254297810373,  -0.157721301562393,   0.171838581104214,  -0.159282253882384,   0.153692305711512,  -0.000244631681385317, 0, 0],
    [0.0259186933858971,  0.0259186933858971,   0.0259186933858971,  0.0259186933858971,  0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0259186933858971,   0.0106794630936747,  -0.115335444191199,   0.157354569317741,   0.0996953916040489,   0.124626570680465,   0.0999254297810373,  -0.157721301562393,   0.171838581104214,  -0.159282253882384,   0.153692305711512,   0.135802482016176,  -0.146394354124576, 0]
])

b_np = np.array([
    0.025918693385897126,  0.025918693385897126,  0.025918693385897126,
    0.025918693385897126,  0.025918693385897126,  0.025918693385897126,
    0.025918693385897126,  0.025918693385897126,  0.010679463093674657,
   -0.115335444191199370,   0.157354569317740920,   0.099695391604048860,
    0.124626570680464910,   0.099925429781037310,  -0.157721301562393400,
    0.171838581104213520,  -0.159282253882383900,   0.153692305711511770,
    0.135802482016176060,   0.126744816271275730,   0.144629842968655860
])

# 1) Compute the "c" array: c[i] = sum_{j=0..i-1} a_np[i][j]
c = np.array([np.sum(a_np[i, :i]) for i in range(S)])

# 2) Compute the four B-series sums:
B1 = np.sum(b_np)
B2 = np.sum(b_np * c)
B3a = np.sum(b_np * c**2)
B3b = 0.0
for i in range(S):
    B3b += b_np[i] * np.dot(a_np[i, :], c)

# 3) Print the results and their deviations from exact targets
print(f"B1  = {B1:.15f}   ( target = 1 )   residual = {abs(B1 - 1):.2e}")
print(f"B2  = {B2:.15f}   ( target = 1/2 )   residual = {abs(B2 - 0.5):.2e}")
print(f"B3a = {B3a:.15f}   ( target = 1/3 )   residual = {abs(B3a - 1.0/3.0):.2e}")
print(f"B3b = {B3b:.15f}   ( target = 1/6 )   residual = {abs(B3b - 1.0/6.0):.2e}")
