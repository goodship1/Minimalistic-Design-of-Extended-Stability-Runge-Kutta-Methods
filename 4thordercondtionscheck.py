import numpy as np

# Define the A matrix and b vector
a = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.297950632696351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0892840764249344, 0.522026933033341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.144349746352280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, -0.000371956295732390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, -0.124117473662160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.192800131150961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, -0.00721201688860849, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.385496874023061, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.248192855959921, 0, 0, 0, 0, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, -0.295854950063981, -4.25371891111175e-5, 0, 0, 0, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, -0.295854950063981, 0.163017169512979, 0.138371044215410, 0, 0, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, -0.295854950063981, 0.163017169512979, -0.0819824325549522, 0.403108090476214, 0, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, -0.295854950063981, 0.163017169512979, -0.0819824325549522, 0.546008221888163, 0.125164780662438, 0, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, -0.295854950063981, 0.163017169512979, -0.0819824325549522, 0.546008221888163, -0.0422844329611440, -0.00579862710501764, 0, 0],
    [0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344, -0.295854950063981, 0.163017169512979, -0.0819824325549522, 0.546008221888163, -0.0422844329611440, 0.467431197768081, 0.502036131647685, 0]
])

b = np.array([
    0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344,
    0.0892840764249344, 0.0892840764249344, 0.0892840764249344, 0.0892840764249344,
    -0.29585495006398077, 0.1630171695129791, -0.08198243255495223, 0.5460082218881631,
    -0.04228443296114401, 0.46743119776808084, -0.45495020324595, -0.01565718174267131
])

# Compute c values (sum of rows of A matrix)
c = np.sum(a, axis=1)

# Check order conditions
order_conditions = {
    "Order 1 (Sum of weights)": np.isclose(np.sum(b), 1),
    "Order 2 (Weighted node values)": np.isclose(np.dot(b, c), 0.5),
    "Order 3.1 (Weighted square of node values)": np.isclose(np.dot(b, c**2), 1/3),
    "Order 3.2 (Weighted sum of a_ij * c_j)": np.isclose(
        np.sum([
            b[i] * np.dot(a[i, :i], c[:i])  # Explicit schemes only consider i-1 terms
            for i in range(1, len(b))
        ]), 1/6
    ),
    "Order 4.1 (Weighted cube of node values)": np.isclose(np.dot(b, c**3), 1/4),
    "Order 4.2 (Weighted sum of a_ij * c_j^2)": np.isclose(
        np.sum([
            b[i] * np.dot(a[i, :i], c[:i]**2)
            for i in range(1, len(b))
        ]), 1/8
    ),
    "Order 4.3 (Weighted sum of a_ij * a_jk * c_k)": np.isclose(
        np.sum([
            b[i] * np.sum([
                a[i, j] * np.dot(a[j, :j], c[:j])
                for j in range(1, i)
            ]) for i in range(2, len(b))
        ]), 1/24
    )
}

# Display results
for condition, satisfied in order_conditions.items():
    print(f"{condition}: {'Satisfied' if satisfied else 'Not Satisfied'}")

