import numpy as np
import math

# ----------------------------------------------------------------------------
# 1) Coefficients for the 15-stage ESRK method
# ----------------------------------------------------------------------------
A = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0243586417803786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0258303808904268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0667956303329210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0140960387721938, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0412105997557866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0149469583607297, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.0358989324994081, 0.414086419082813, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.0358989324994081]*7 + [-0.000396135089732896] + [0]*7,
    [0.0358989324994081]*8 + [-0.153935717033075] + [0]*6,
    [0.0358989324994081]*8 + [0.0106794630936747, 0.000795951292330683] + [0]*5,
    [0.0358989324994081]*8 + [0.0106794630936747, -0.115335444191199, -0.119588952205909] + [0]*4,
    [0.0358989324994081]*8 + [0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.164687679052309] + [0]*3,
    [0.0358989324994081]*8 + [0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, -0.151151371693320] + [0]*2,
    [0.0358989324994081]*8 + [0.0106794630936747, -0.115335444191199, 0.157354569317741, 0.0996953916040489, 0.124626570680465, -0.185777493787929] + [0]
], dtype=float)

b = np.array([
    0.035898932499408134, 0.035898932499408134, 0.035898932499408134,
    0.035898932499408134, 0.035898932499408134, 0.035898932499408134,
    0.035898932499408134, 0.035898932499408134, 0.006612457947210495,
    0.21674686949693006, 0.0, 0.42264597549826616, 0.03276149074985981,
    0.0330623263939421, 0.0009799086295048407
], dtype=float)

# ----------------------------------------------------------------------------
# 2) ESRK-15 step for u' = 1 (constant derivative)
# ----------------------------------------------------------------------------
def esrk15_step_const1(u, h):
    s = len(b)
    k = [None]*s
    for i in range(s):
        ui = u
        for j in range(i):
            ui += h * A[i,j] * k[j]
        k[i] = 1.0
    u_next = u + h * sum(b[i] * k[i] for i in range(s))
    return u_next

# ----------------------------------------------------------------------------
# 3) Long-time constant-derivative test
# ----------------------------------------------------------------------------
R_max = 72.0
h_init = R_max / 10.0
t_final = 1e6
N = int(math.ceil(t_final / h_init))
h = t_final / N

u = 1.0
for _ in range(N):
    u = esrk15_step_const1(u, h)

# Exact solution: u_exact = 1 + t_final
u_exact = 1.0 + t_final
rel_error = abs(u - u_exact) / abs(u_exact)
pred_bound = 16 * np.finfo(float).eps * N

print(f"Constant-derivative test (u' = 1) over N = {N:,} steps")
print(f"Step size h = {h:.6f}")
print(f"Predicted bound â‰² {pred_bound:.3e}")
print(f"Observed relative error = {rel_error:.3e}")
